In this stage, we analyze the IPL data to uncover recurring patterns, long-term trends, and unusual anomalies that can impact understanding and modeling.

Key Patterns and Trends:
Season-wise Scoring Trends:
By examining the average total runs per match across different IPL seasons, we observe a gradual increase in scoring rates over the years, 
possibly due to changes in playing conditions, rules favoring batsmen, or player skills improving.

Player Performance Consistency:
Analysis of individual player stats reveals that certain batsmen and bowlers maintain high performance across multiple seasons, 
highlighting their reliability. For example, players like Virat Kohli consistently score high runs each season, while bowlers like Jasprit Bumrah maintain low economy rates.

Impact of Toss Decisions:
There is a noticeable pattern that teams winning the toss and choosing to field first have a slightly higher win ratio, 
indicating chasing teams often have an advantage.

Detecting Anomalies:
Outlier Matches with Extremely High or Low Scores:
Some matches have first innings scores well beyond the average (e.g., 220+ runs), which are outliers indicating exceptional 
batting conditions or weak bowling. Conversely, very low scores (below 100) point to bowler-friendly pitches or poor batting performance.

Unusual Player Performances:
Identifying innings where players have extraordinarily high strike rates or bowlers with exceptionally low economy rates
in a single match can reveal standout performances worth further investigation.

Methods Used:
Time-series plots of runs and wickets across seasons.

Grouping by player and season to track performance consistency.

Statistical detection of outliers using boxplots and z-score methods.

Cross-tabulation of toss decisions versus match results.

Sample Code Snippet to Identify Trends and Anomalies:
import matplotlib.pyplot as plt
import seaborn as sns

# Average total runs per season
season_runs = deliveries.groupby('season').agg({'total_runs': 'sum', 'match_id': 'nunique'})
season_runs['avg_runs_per_match'] = season_runs['total_runs'] / season_runs['match_id']

plt.figure(figsize=(10,6))
sns.lineplot(x=season_runs.index, y='avg_runs_per_match', data=season_runs, marker='o')
plt.title('Average Runs per Match Across IPL Seasons')
plt.xlabel('Season')
plt.ylabel('Average Runs per Match')
plt.show()

# Detect outlier matches with high first innings score
first_innings_scores = deliveries[deliveries['inning'] == 1].groupby('match_id')['total_runs'].sum()
sns.boxplot(first_innings_scores)
plt.title('First Innings Total Runs Distribution (Outliers Shown)')
plt.show()


Below is a clean, ready-to-use Python code snippet that generates two key graphs to illustrate the patterns, trends, and anomalies in your IPL data

Line plot showing average total runs per match across IPL seasons (trend over time)
Boxplot showing distribution of first innings total scores to highlight outliers (anomalies)
Make sure you have the deliveries.csv dataset loaded and the required libraries installed (pandas, matplotlib, seaborn).
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load IPL deliveries data
deliveries = pd.read_csv("deliveries.csv")

# Calculate total runs per match per inning
runs_per_inning = deliveries.groupby(['match_id', 'inning']).agg({'total_runs': 'sum'}).reset_index()

# Load matches dataset to get season info per match
matches = pd.read_csv("matches.csv")

# Merge to get season for each match
runs_per_inning = runs_per_inning.merge(matches[['id', 'season']], left_on='match_id', right_on='id', how='left')

# --- 1. Trend: Average total runs per match (all innings combined) by season ---

# Sum runs of both innings to get total runs per match
total_runs_per_match = runs_per_inning.groupby(['match_id', 'season'])['total_runs'].sum().reset_index()

# Calculate average runs per match by season
avg_runs_per_season = total_runs_per_match.groupby('season')['total_runs'].mean().reset_index()

# Plot average runs per match by season
plt.figure(figsize=(10,6))
sns.lineplot(data=avg_runs_per_season, x='season', y='total_runs', marker='o')
plt.title('Average Total Runs per Match Across IPL Seasons')
plt.xlabel('Season')
plt.ylabel('Average Runs')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# --- 2. Anomaly Detection: Boxplot of first innings total scores to detect outliers ---

# Filter for first innings only
first_innings_scores = runs_per_inning[runs_per_inning['inning'] == 1]

plt.figure(figsize=(8,5))
sns.boxplot(x=first_innings_scores['total_runs'])
plt.title('Distribution of First Innings Total Scores (Outliers Highlighted)')
plt.xlabel('Total Runs')
plt.show()

What these graphs show:
Line Plot: You can see whether scoring in IPL has increased, decreased, or remained stable across seasons.

Boxplot: Identifies matches with unusually high or low first innings scores, showing anomalies/outliers in the dataset.

